// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: channels.sql

package database

import (
	"context"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels(id, title, handle, created_at)
VALUES (
	?,
	?,
	?,
        datetime('now')
)
RETURNING id, handle, title, created_at
`

type CreateChannelParams struct {
	ID     string
	Title  string
	Handle string
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel, arg.ID, arg.Title, arg.Handle)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Handle,
		&i.Title,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :one
DELETE FROM channels
WHERE id = ?
RETURNING id, handle, title, created_at
`

func (q *Queries) DeleteChannel(ctx context.Context, id string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, deleteChannel, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Handle,
		&i.Title,
		&i.CreatedAt,
	)
	return i, err
}

const getChannels = `-- name: GetChannels :many
SELECT id, handle, title, created_at FROM channels
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Handle,
			&i.Title,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
