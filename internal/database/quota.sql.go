// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: quota.sql

package database

import (
	"context"
)

const getQuota = `-- name: GetQuota :one
SELECT id, quota, created_at, updated_at FROM quota
`

func (q *Queries) GetQuota(ctx context.Context) (Quotum, error) {
	row := q.db.QueryRowContext(ctx, getQuota)
	var i Quotum
	err := row.Scan(
		&i.ID,
		&i.Quota,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const refreshQuota = `-- name: RefreshQuota :one
UPDATE quota 
SET updated_at = datetime('now'), quota = 10000
WHERE id = ?
RETURNING id, quota, created_at, updated_at
`

func (q *Queries) RefreshQuota(ctx context.Context, id string) (Quotum, error) {
	row := q.db.QueryRowContext(ctx, refreshQuota, id)
	var i Quotum
	err := row.Scan(
		&i.ID,
		&i.Quota,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setupQuota = `-- name: SetupQuota :one
INSERT INTO quota(id, created_at, updated_at, quota)
VALUES(
	?,
	datetime('now'),
        datetime('now'),
	10000
)
RETURNING id, quota, created_at, updated_at
`

func (q *Queries) SetupQuota(ctx context.Context, id string) (Quotum, error) {
	row := q.db.QueryRowContext(ctx, setupQuota, id)
	var i Quotum
	err := row.Scan(
		&i.ID,
		&i.Quota,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQuota = `-- name: UpdateQuota :one
UPDATE quota 
SET updated_at = datetime('now'), quota = ?
WHERE id = ?
RETURNING id, quota, created_at, updated_at
`

type UpdateQuotaParams struct {
	Quota int64
	ID    string
}

func (q *Queries) UpdateQuota(ctx context.Context, arg UpdateQuotaParams) (Quotum, error) {
	row := q.db.QueryRowContext(ctx, updateQuota, arg.Quota, arg.ID)
	var i Quotum
	err := row.Scan(
		&i.ID,
		&i.Quota,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
