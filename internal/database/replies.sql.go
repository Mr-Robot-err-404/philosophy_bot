// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: replies.sql

package database

import (
	"context"
)

const getReplies = `-- name: GetReplies :many
SELECT id, likes, quote_id, created_at, video_id FROM replies
`

func (q *Queries) GetReplies(ctx context.Context) ([]Reply, error) {
	rows, err := q.db.QueryContext(ctx, getReplies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reply
	for rows.Next() {
		var i Reply
		if err := rows.Scan(
			&i.ID,
			&i.Likes,
			&i.QuoteID,
			&i.CreatedAt,
			&i.VideoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkVideo = `-- name: LinkVideo :one
UPDATE replies
SET video_id = ?
WHERE id = ?
RETURNING id, likes, quote_id, created_at, video_id
`

type LinkVideoParams struct {
	VideoID string
	ID      string
}

func (q *Queries) LinkVideo(ctx context.Context, arg LinkVideoParams) (Reply, error) {
	row := q.db.QueryRowContext(ctx, linkVideo, arg.VideoID, arg.ID)
	var i Reply
	err := row.Scan(
		&i.ID,
		&i.Likes,
		&i.QuoteID,
		&i.CreatedAt,
		&i.VideoID,
	)
	return i, err
}

const storeReply = `-- name: StoreReply :many
INSERT INTO replies(id, likes, quote_id, video_id, created_at)
VALUES (
	?,
	?,
	?,
	?,
        datetime('now')
)
RETURNING id, likes, quote_id, created_at, video_id
`

type StoreReplyParams struct {
	ID      string
	Likes   int64
	QuoteID int64
	VideoID string
}

func (q *Queries) StoreReply(ctx context.Context, arg StoreReplyParams) ([]Reply, error) {
	rows, err := q.db.QueryContext(ctx, storeReply,
		arg.ID,
		arg.Likes,
		arg.QuoteID,
		arg.VideoID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reply
	for rows.Next() {
		var i Reply
		if err := rows.Scan(
			&i.ID,
			&i.Likes,
			&i.QuoteID,
			&i.CreatedAt,
			&i.VideoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
