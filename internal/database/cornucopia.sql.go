// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cornucopia.sql

package database

import (
	"context"
)

const createQuote = `-- name: CreateQuote :one
INSERT INTO cornucopia (id, quote, author, categories, created_at)
VALUES (
	?,
	?, 
	?, 
	?,
        datetime('now')
)
RETURNING id, quote, author, categories, created_at
`

type CreateQuoteParams struct {
	ID         interface{}
	Quote      string
	Author     string
	Categories string
}

func (q *Queries) CreateQuote(ctx context.Context, arg CreateQuoteParams) (Cornucopium, error) {
	row := q.db.QueryRowContext(ctx, createQuote,
		arg.ID,
		arg.Quote,
		arg.Author,
		arg.Categories,
	)
	var i Cornucopium
	err := row.Scan(
		&i.ID,
		&i.Quote,
		&i.Author,
		&i.Categories,
		&i.CreatedAt,
	)
	return i, err
}

const getQuotes = `-- name: GetQuotes :many
SELECT id, quote, author, categories, created_at FROM cornucopia
`

func (q *Queries) GetQuotes(ctx context.Context) ([]Cornucopium, error) {
	rows, err := q.db.QueryContext(ctx, getQuotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cornucopium
	for rows.Next() {
		var i Cornucopium
		if err := rows.Scan(
			&i.ID,
			&i.Quote,
			&i.Author,
			&i.Categories,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
