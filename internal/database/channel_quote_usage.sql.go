// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: channel_quote_usage.sql

package database

import (
	"context"
)

const isQuoteUsed = `-- name: IsQuoteUsed :one
SELECT EXISTS(SELECT 1 FROM channel_quote_usage WHERE channel_id = ? AND quote_id = ?)
`

type IsQuoteUsedParams struct {
	ChannelID string
	QuoteID   int64
}

func (q *Queries) IsQuoteUsed(ctx context.Context, arg IsQuoteUsedParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isQuoteUsed, arg.ChannelID, arg.QuoteID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const saveUsage = `-- name: SaveUsage :one
INSERT INTO channel_quote_usage(channel_id, quote_id)
VALUES (?, ?)
RETURNING channel_id, quote_id
`

type SaveUsageParams struct {
	ChannelID string
	QuoteID   int64
}

func (q *Queries) SaveUsage(ctx context.Context, arg SaveUsageParams) (ChannelQuoteUsage, error) {
	row := q.db.QueryRowContext(ctx, saveUsage, arg.ChannelID, arg.QuoteID)
	var i ChannelQuoteUsage
	err := row.Scan(&i.ChannelID, &i.QuoteID)
	return i, err
}

const selectUnusedQuotes = `-- name: SelectUnusedQuotes :many
SELECT id, quote, author, categories, created_at
FROM cornucopia q
WHERE q.id NOT IN (
    SELECT quote_id 
    FROM channel_quote_usage 
    WHERE channel_id = ?
)
`

func (q *Queries) SelectUnusedQuotes(ctx context.Context, channelID string) ([]Cornucopium, error) {
	rows, err := q.db.QueryContext(ctx, selectUnusedQuotes, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cornucopium
	for rows.Next() {
		var i Cornucopium
		if err := rows.Scan(
			&i.ID,
			&i.Quote,
			&i.Author,
			&i.Categories,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
