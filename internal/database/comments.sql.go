// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package database

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, likes, quote_id, created_at) 
VALUES (
	?,
	0,
	?,
	datetime('now')
)
RETURNING id, likes, quote_id, created_at, channel_id
`

type CreateCommentParams struct {
	ID      string
	QuoteID int64
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.ID, arg.QuoteID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Likes,
		&i.QuoteID,
		&i.CreatedAt,
		&i.ChannelID,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT id, likes, quote_id, created_at, channel_id FROM comments
`

func (q *Queries) GetComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Likes,
			&i.QuoteID,
			&i.CreatedAt,
			&i.ChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
