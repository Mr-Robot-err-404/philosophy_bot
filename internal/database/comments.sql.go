// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package database

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, likes, quote_id, created_at) 
VALUES (
	?,
	0,
	?,
	datetime('now')
)
RETURNING id, likes, quote_id, created_at
`

type CreateCommentParams struct {
	ID      string
	QuoteID int64
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.ID, arg.QuoteID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Likes,
		&i.QuoteID,
		&i.CreatedAt,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT id, likes, quote_id, created_at FROM comments
`

func (q *Queries) GetComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Likes,
			&i.QuoteID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPopularComments = `-- name: GetPopularComments :many
SELECT comments.id, comments.likes, comments.quote_id, comments.created_at, cornucopia.quote, cornucopia.author
FROM comments JOIN cornucopia ON comments.quote_id = cornucopia.id
ORDER BY comments.likes DESC
`

type GetPopularCommentsRow struct {
	ID        string
	Likes     int64
	QuoteID   int64
	CreatedAt time.Time
	Quote     string
	Author    string
}

func (q *Queries) GetPopularComments(ctx context.Context) ([]GetPopularCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPopularComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPopularCommentsRow
	for rows.Next() {
		var i GetPopularCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Likes,
			&i.QuoteID,
			&i.CreatedAt,
			&i.Quote,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidComments = `-- name: GetValidComments :many
SELECT id, likes, quote_id, created_at FROM comments
WHERE created_at > ? OR likes > 50
`

func (q *Queries) GetValidComments(ctx context.Context, createdAt time.Time) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getValidComments, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Likes,
			&i.QuoteID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommentLikes = `-- name: UpdateCommentLikes :one
UPDATE comments 
SET likes = ?
WHERE id = ?
RETURNING id, likes, quote_id, created_at
`

type UpdateCommentLikesParams struct {
	Likes int64
	ID    string
}

func (q *Queries) UpdateCommentLikes(ctx context.Context, arg UpdateCommentLikesParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateCommentLikes, arg.Likes, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Likes,
		&i.QuoteID,
		&i.CreatedAt,
	)
	return i, err
}
